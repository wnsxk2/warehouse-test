// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  phone        String?
  address      String?
  maxUsers     Int           @default(50)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  users         User[]
  warehouses    Warehouse[]
  items         Item[]
  transactions  Transaction[]
  inviteCodes   InviteCode[]
  notifications Notification[]
  history       CompanyHistory[]

  @@map("companies")
}

model Account {
  id          String         @id @default(uuid())
  email       String         @unique
  password    String
  isActive    Boolean        @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user          User?
  refreshTokens RefreshToken[]
  history       AccountHistory[]

  @@map("accounts")
}

model User {
  id        String   @id @default(uuid())
  accountId String   @unique
  name      String
  role      Role     @default(USER)
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account       Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  company       Company?       @relation(fields: [companyId], references: [id])
  transactions  Transaction[]
  inviteCodes   InviteCode[]
  notifications Notification[]
  history       UserHistory[]

  @@index([companyId])
  @@index([companyId, role])
  @@map("users")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  accountId String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([accountId, expiresAt, isRevoked])
  @@map("refresh_tokens")
}

model Warehouse {
  id          String      @id @default(uuid())
  name        String
  location    String
  capacity    Decimal     @db.Decimal(10, 2)
  companyId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  company      Company          @relation(fields: [companyId], references: [id])
  inventory    Inventory[]
  transactions Transaction[]
  history      WarehouseHistory[]

  @@index([companyId])
  @@map("warehouses")
}

model Item {
  id               String      @id @default(uuid())
  sku              String      @unique
  name             String
  category         String?
  unitOfMeasure    String
  description      String?     @db.Text
  reorderThreshold Int?
  companyId        String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  company      Company       @relation(fields: [companyId], references: [id])
  inventory    Inventory[]
  transactions Transaction[]
  history      ItemHistory[]

  @@index([companyId])
  @@index([companyId, category])
  @@map("items")
}

model Inventory {
  id              String    @id @default(uuid())
  warehouseId     String
  itemId          String
  quantity        Decimal   @db.Decimal(10, 2)
  lastRestockedAt DateTime?
  updatedAt       DateTime  @updatedAt

  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  item      Item      @relation(fields: [itemId], references: [id])

  @@unique([warehouseId, itemId])
  @@index([warehouseId])
  @@index([itemId])
  @@map("inventory")
}

model Transaction {
  id          String          @id @default(uuid())
  type        TransactionType
  warehouseId String
  itemId      String
  quantity    Decimal         @db.Decimal(10, 2)
  notes       String?         @db.Text
  createdBy   String
  companyId   String
  createdAt   DateTime        @default(now())

  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  item      Item      @relation(fields: [itemId], references: [id])
  user      User      @relation(fields: [createdBy], references: [id])
  company   Company   @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([companyId, type])
  @@index([companyId, createdAt(sort: Desc)])
  @@index([warehouseId, createdAt(sort: Desc)])
  @@index([itemId, createdAt(sort: Desc)])
  @@map("transactions")
}

enum TransactionType {
  INBOUND
  OUTBOUND
}

model InviteCode {
  id           String    @id @default(uuid())
  code         String    @unique
  companyId    String
  createdBy    String
  expiresAt    DateTime
  maxUses      Int       @default(1)
  usedCount    Int       @default(0)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  company Company @relation(fields: [companyId], references: [id])
  creator User    @relation(fields: [createdBy], references: [id])

  @@index([companyId])
  @@index([code, isActive])
  @@index([companyId, isActive])
  @@map("invite_codes")
}

model Notification {
  id          String           @id @default(uuid())
  companyId   String
  userId      String?
  type        NotificationType
  title       String
  message     String           @db.Text
  relatedId   String?
  isRead      Boolean          @default(false) // Deprecated: Use NotificationRead instead
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  company          Company            @relation(fields: [companyId], references: [id])
  user             User?              @relation(fields: [userId], references: [id])
  notificationRead NotificationRead[]

  @@index([companyId, isRead, createdAt(sort: Desc)])
  @@index([userId, isRead, createdAt(sort: Desc)])
  @@index([companyId, createdAt(sort: Desc)])
  @@map("notifications")
}

model NotificationRead {
  id             String       @id @default(uuid())
  notificationId String
  userId         String
  readAt         DateTime     @default(now())

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
  @@index([userId, readAt])
  @@index([notificationId])
  @@map("notification_reads")
}

enum NotificationType {
  WAREHOUSE_CREATED
  WAREHOUSE_DELETED
  ITEM_CREATED
  ITEM_DELETED
  TRANSACTION_CREATED
}

enum HistoryOperation {
  CREATE
  UPDATE
  DELETE
}

// History Tables
model ItemHistory {
  id               String           @id @default(uuid())
  originalId       String
  operation        HistoryOperation
  sku              String
  name             String
  category         String?
  unitOfMeasure    String
  description      String?          @db.Text
  reorderThreshold Int?
  companyId        String
  changedBy        String?
  changedAt        DateTime         @default(now())

  item Item @relation(fields: [originalId], references: [id], onDelete: Cascade)

  @@index([originalId, changedAt(sort: Desc)])
  @@index([companyId, changedAt(sort: Desc)])
  @@map("item_history")
}

model WarehouseHistory {
  id         String           @id @default(uuid())
  originalId String
  operation  HistoryOperation
  name       String
  location   String
  capacity   Decimal          @db.Decimal(10, 2)
  companyId  String
  changedBy  String?
  changedAt  DateTime         @default(now())

  warehouse Warehouse @relation(fields: [originalId], references: [id], onDelete: Cascade)

  @@index([originalId, changedAt(sort: Desc)])
  @@index([companyId, changedAt(sort: Desc)])
  @@map("warehouse_history")
}

model UserHistory {
  id         String           @id @default(uuid())
  originalId String
  operation  HistoryOperation
  accountId  String
  name       String
  role       Role
  companyId  String?
  changedBy  String?
  changedAt  DateTime         @default(now())

  user User @relation(fields: [originalId], references: [id], onDelete: Cascade)

  @@index([originalId, changedAt(sort: Desc)])
  @@index([companyId, changedAt(sort: Desc)])
  @@map("user_history")
}

model AccountHistory {
  id          String           @id @default(uuid())
  originalId  String
  operation   HistoryOperation
  email       String
  isActive    Boolean
  lastLoginAt DateTime?
  changedBy   String?
  changedAt   DateTime         @default(now())

  account Account @relation(fields: [originalId], references: [id], onDelete: Cascade)

  @@index([originalId, changedAt(sort: Desc)])
  @@map("account_history")
}

model CompanyHistory {
  id         String           @id @default(uuid())
  originalId String
  operation  HistoryOperation
  name       String
  email      String
  phone      String?
  address    String?
  maxUsers   Int
  changedBy  String?
  changedAt  DateTime         @default(now())

  company Company @relation(fields: [originalId], references: [id], onDelete: Cascade)

  @@index([originalId, changedAt(sort: Desc)])
  @@map("company_history")
}
